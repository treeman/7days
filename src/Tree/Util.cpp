#include "Game.hpp"#include "Tweaks.hpp"#include "Util.hpp"float Tree::get_FPS(){    return GAME->GetFPS();}const sf::Input &Tree::get_input(){    return GAME->GetInput();}const int Tree::get_window_width(){    return GAME->GetWindowWidth();}const int Tree::get_window_height(){    return GAME->GetWindowHeight();}bool Tree::is_mouse_valid(){    Vec2f pos = get_mouse_pos();    return pos.x >= 0 && pos.x <= WINDOW_WIDTH        && pos.y >= 0 && pos.y <= WINDOW_HEIGHT;}Vec2f Tree::get_mouse_pos(){    return GAME->GetMousePos();}void Tree::set_mouse_pos( const Vec2f &pos ){    Tree::set_mouse_pos( pos.x, pos.y );}void Tree::set_mouse_pos( float x, float y ){    GAME->SetMousePos( x, y );}void Tree::exit(){    GAME->Exit();}void Tree::debug( std::string str ){    GAME->GetVisualDebug()->Add( str );}void Tree::debug( const char *msg, ... ){    va_list args;    va_start( args, msg );    char buf[1024];    vsprintf( buf, msg, args );    std::string str = buf;    GAME->GetVisualDebug()->Add( str );}void Tree::debug_persist( std::string id, std::string str ){    GAME->GetVisualDebug()->SetPersistent( id, str );}void Tree::debug_persist( std::string id, const char *msg, ... ){    va_list args;    va_start( args, msg );    char buf[1024];    vsprintf( buf, msg, args );    std::string str = buf;    GAME->GetVisualDebug()->SetPersistent( id, str );}void Tree::debug_remove( std::string id ){    GAME->GetVisualDebug()->RemovePersistent( id );}void Tree::set_log_key( int key ){    get_log_helper()->SetLogKey( key );}bool Tree::shall_log(){    return get_log_helper()->ShallLog();}void Tree::request_version( float version ){    GAME->RequestMinVersion( version );}boost::shared_ptr<Tree::Butler> Tree::get_butler(){    return GAME->GetButler();}boost::shared_ptr<Tree::Settings> Tree::get_settings(){    return GAME->GetSettings();}boost::shared_ptr<Tree::Tweaks> Tree::get_tweaks(){    return GAME->GetTweaks();}boost::shared_ptr<Tree::LogHelper> Tree::get_log_helper(){    return GAME->GetLogHelper();}